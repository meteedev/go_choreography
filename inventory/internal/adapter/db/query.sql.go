// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const deleteReservations = `-- name: DeleteReservations :one
DELETE FROM reservations where order_id = $1 and  product_code = $2 
RETURNING id, order_id, product_code, quantity, created_at
`

type DeleteReservationsParams struct {
	OrderID     uuid.NullUUID
	ProductCode string
}

func (q *Queries) DeleteReservations(ctx context.Context, arg DeleteReservationsParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, deleteReservations, arg.OrderID, arg.ProductCode)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductCode,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, product_code, product_name, description, quantity_in_stock, unit_price, reorder_level, created_at, updated_at, deleted_at FROM inventory
WHERE product_code = $1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, productCode string) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, getProduct, productCode)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.ProductCode,
		&i.ProductName,
		&i.Description,
		&i.QuantityInStock,
		&i.UnitPrice,
		&i.ReorderLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProductQuantity = `-- name: GetProductQuantity :one
SELECT COALESCE(quantity_in_stock, 0) as count FROM inventory
WHERE product_code = $1
`

func (q *Queries) GetProductQuantity(ctx context.Context, productCode string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getProductQuantity, productCode)
	var count int32
	err := row.Scan(&count)
	return count, err
}

const insertReservations = `-- name: InsertReservations :one
INSERT INTO reservations (order_id, product_code, quantity) 
VALUES ($1, $2, $3)
RETURNING id, order_id, product_code, quantity, created_at
`

type InsertReservationsParams struct {
	OrderID     uuid.NullUUID
	ProductCode string
	Quantity    int32
}

func (q *Queries) InsertReservations(ctx context.Context, arg InsertReservationsParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, insertReservations, arg.OrderID, arg.ProductCode, arg.Quantity)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductCode,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const updateProductQuantity = `-- name: UpdateProductQuantity :one
UPDATE inventory 
SET quantity_in_stock = quantity_in_stock - $1, updated_at = NOW() 
WHERE product_code = $2
RETURNING id, product_code, product_name, description, quantity_in_stock, unit_price, reorder_level, created_at, updated_at, deleted_at
`

type UpdateProductQuantityParams struct {
	QuantityInStock int32
	ProductCode     string
}

func (q *Queries) UpdateProductQuantity(ctx context.Context, arg UpdateProductQuantityParams) (Inventory, error) {
	row := q.db.QueryRowContext(ctx, updateProductQuantity, arg.QuantityInStock, arg.ProductCode)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.ProductCode,
		&i.ProductName,
		&i.Description,
		&i.QuantityInStock,
		&i.UnitPrice,
		&i.ReorderLevel,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
